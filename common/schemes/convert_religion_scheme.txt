convert_to_faith = {
	skill = learning
	desc = convert_to_faith_general_desc
	cooldown = { months = 2 }
	is_secret = yes
	uses_agents = yes
	power_per_skill_point = 5
	resistance_per_skill_point = 0
	minimum_progress_chance = 10
	base_secrecy = 30
	maximum_secrecy = 80
	minimum_success = 5
	maximum_success = 80
	icon = icon_scheme_convert_to_witchcraft

	allow = {
		is_adult = yes
		is_imprisoned = no
		is_travelling = no
		scope:target = {
			NOT = {
				faith = scope:owner.faith
				has_title = faith.religious_head_title
			}
			is_adult = yes
			is_imprisoned = no
			is_travelling = no
		}
	}

	valid = {
		custom_description = {
			text = conversion_scheme_blocked
			subject = scope:target
		}
		NOT = {
			scope:target = {
				has_character_flag = block_convert_to_faith
			}
		}
		scope:target = {
			exists = location
		}
	}

	use_secrecy = {
		# You only need to worry about this if your faith is worse than astray to the target
		# Or the target is zealous
		scope:owner = {
			OR = {
				faith = {
					faith_hostility_level = {
						target = scope:target.faith
						value > faith_astray_level
					}
				}
				has_trait = zealous
			}
		}
	}

	valid_agent = {
		age >= 14
		# Need to be your faith, have the same head of faith, or consider your faith righteous, or be cynical
		OR = {
			faith = scope:owner.faith
			faith = {
				faith_hostility_level = {
					target = scope:owner.faith
					value < faith_astray_level
				}
			}
			faith.religious_head_title = scope:owner.faith.religious_head_title
			has_trait = cynical
		}
	}

	agent_join_chance = {
		base = 0
		
		# Base Reluctance, including negative AI Energy
		modifier = {
			add = {
				value = -20
				if = {
					limit = {
						ai_energy < 0
					}
					add = {
						value = ai_energy
						multiply = 0.5
					}
				}
			}
			desc = BASE_RELUCTANCE
		}

		#Is Owner sending a gift in the invite interaction?
		modifier = {
			add = 10
			exists = scope:gift
			always = scope:gift
			NOT = {
				OR = {
					scope:target = { is_parent_of = root }
					root = { is_parent_of = scope:target }
				}
			}
			desc = "SCHEME_WITH_GIFT"
		}
		modifier = {
			add = 20
			exists = scope:hook
			always = scope:hook
			NOT = {
				OR = {
					scope:target = { is_parent_of = root }
					root = { is_parent_of = scope:target }
				}
			}
			desc = "SCHEME_WITH_HOOK"
		}

		#Target will never scheme against themselves
		modifier = {
			add = -1000
			this = scope:target
			desc = COMPASSIONATE_REASON #SCHEME_NOT_AGAINST_SELF
		}
		
		#Target is not diplomatically available
		modifier = {
			add = -1000
			is_busy_in_events_localised = no
			desc = SCHEME_NOT_DIPLOMATICALLY_AVAILABLE
		}
		
		# Zealous member of the faith
		modifier = {
			trigger = {
				faith = scope:owner.faith
			}
			add = ai_zeal
			desc = SCHEME_AI_ZEAL
		}

		# literal zealots
		modifier = {
			trigger = {
				faith = scope:owner.faith
				has_trait = zealous
			}
			add = 50
			desc = SCHEME_I_AM_A_ZEALOT
		}

		# Minority vassal of the faith
		modifier = {
			trigger = {
				is_vassal_of = scope:target
				faith = scope:owner.faith
				has_vassal_stance = minority
			}
			add = 25
			desc = SCHEME_MINORITY_FAITHFUL
		}

		# Cowardice
		modifier = {
			trigger = {
				ai_boldness < 0
			}
			add = {
				value = ai_boldness
			}
			desc = SCHEME_I_AM_A_COWARD
		}

		#How much does Agent like Owner?
		opinion_modifier = {
			trigger = {
				NOT = { this = scope:owner }
			}
			who = this
			opinion_target = scope:owner
			multiplier = 0.2
			#step = 5
			desc = SCHEME_MY_OPINION_OF_YOU
		}
	}


	base_success_chance = {
		base = -10

		#Head of Faith or heresiarch
		modifier = {
			scope:owner = {
				OR = {
					has_trait = trait_heresiarch
					has_title = faith.religious_head_title
				}
			}
			desc = "RELIGIOUS_HEAD_OR_HERESIARCH"
			add = 15
		}

		modifier = {
			scope:owner = {
				has_perk = zealous_proselytizer_perk
			}
			desc = "SCHEME_PROSELYTIZER"
			add = scope:owner.learning
		}

		#Learning based
		compare_modifier = {
			target = scope:owner
			value = learning
			multiplier = 3
			step = 5
			desc = "SCHEME_LEARNING_MODIFIER"
		}

		#Their zeal
		ai_value_modifier = {
			who = scope:target
			ai_zeal = -1
			max = 50
		}

		#Opinion
		opinion_modifier = {
			who = scope:target
			opinion_target = scope:owner
			min = -50
			max = 25
			multiplier = 1.5
			step = 5
		}

		#Attraction
		modifier = {
			add = 10
			scope:owner = {
				attraction >= 10
				attraction < 20
			}
			scope:target = { is_attracted_to_gender_of = scope:owner  }
			desc = SCHEME_ATTRACTION
		}
		modifier = {
			add = 20
			scope:owner = {
				attraction >= 20
				attraction < 30
			}
			scope:target = { is_attracted_to_gender_of = scope:owner  }
			desc = SCHEME_ATTRACTION
		}
		modifier = {
			add = 30
			scope:owner = { attraction >= 30 }
			scope:target = { is_attracted_to_gender_of = scope:owner  }
			desc = SCHEME_ATTRACTION
		}

		#Target traits
		modifier = {
			scope:target = { has_trait = zealous }
			desc = "SCHEME_TRAIT_ZEALOUS"
			add = -50
		}
		modifier = {
			scope:target = { has_trait = devoted }
			desc = "SCHEME_TRAIT_DEVOTED"
			add = -30
		}
		modifier = {
			scope:target = { has_trait = order_member }
			desc = "SCHEME_TRAIT_ORDER_MEMBER"
			add = -30
		}
		modifier = {
			scope:target = { has_trait = craven }
			desc = "SCHEME_TRAIT_CRAVEN"
			add = -10
		}
		modifier = {
			scope:target = { has_trait = paranoid }
			desc = "SCHEME_TRAIT_PARANOID"
			add = -20
		}
		modifier = {
			scope:target = { has_trait = excommunicated }
			desc = "SCHEME_TRAIT_EXCOMMUNICATED"
			add = 10
		}
		modifier = {
			scope:target = { num_sinful_traits > 0 }
			desc = "SCHEME_SINNER"
			add = {
				value = 10
				multiply = scope:target.num_sinful_traits
				max = 50
			}
		}
		modifier = {
			scope:target = { num_virtuous_traits > 0 }
			desc = "SCHEME_SAINT"
			add = {
				value = 10
				multiply = scope:target.num_virtuous_traits
				max = 50
			}
		}
		first_valid = {
			modifier = {
				scope:target = {num_virtuous_traits = { value > 4 faith = scope:owner.faith }}
				desc = "SCHEME_VIRTUES"
				add = 50
			}
			modifier = {
				scope:target = {num_virtuous_traits = { value > 3 faith = scope:owner.faith }}
				desc = "SCHEME_VIRTUES"
				add = 40
			}
			modifier = {
				scope:target = {num_virtuous_traits = { value > 2 faith = scope:owner.faith }}
				desc = "SCHEME_VIRTUES"
				add = 30
			}
			modifier = {
				scope:target = {num_virtuous_traits = { value > 1 faith = scope:owner.faith }}
				desc = "SCHEME_VIRTUES"
				add = 20
			}
			modifier = {
				scope:target = {num_virtuous_traits = { value > 0 faith = scope:owner.faith }}
				desc = "SCHEME_VIRTUES"
				add = 10
			}
		}
		first_valid = {
			modifier = {
				scope:target = {num_sinful_traits = { value > 4 faith = scope:owner.faith }}
				desc = "SCHEME_SINS"
				add = -50
			}
			modifier = {
				scope:target = {num_sinful_traits = { value > 3 faith = scope:owner.faith }}
				desc = "SCHEME_SINS"
				add = -40
			}
			modifier = {
				scope:target = {num_sinful_traits = { value > 2 faith = scope:owner.faith }}
				desc = "SCHEME_SINS"
				add = -30
			}
			modifier = {
				scope:target = {num_sinful_traits = { value > 1 faith = scope:owner.faith }}
				desc = "SCHEME_SINS"
				add = -20
			}
			modifier = {
				scope:target = {num_sinful_traits = { value > 0 faith = scope:owner.faith }}
				desc = "SCHEME_SINS"
				add = -10
			}
		}

		modifier = {
			scope:target = { has_perk = apostate_perk }
			desc = "SCHEME_APOSTATE"
			add = 25
		}

		modifier = {
			scope:target = {liege = scope:owner}
			desc = "SCHEME_LIEGE"
			add = 15
		}

		modifier = {
			scope:target = { is_landed = yes }
			add = {
				value = -10
				multiply = {
					value = scope:target.highest_held_title_tier
					add = -1
				}
			}
			desc = "SCHEME_TIER"
		}
		# House Personal Scheme Success Chance on Cultural Parameter
		modifier = {
			add = cultural_house_personal_scheme_success_chance
			desc = KIN_PARAMETER_DESC
			exists = scope:owner.house
			exists = scope:target.house
			scope:owner.culture = {
				has_cultural_parameter = cultural_house_personal_scheme_success_chance
			}
			scope:target.house = scope:owner.house
		}
		# Account for hostility
		first_valid = {
			modifier = {
				scope:owner.faith = {
					faith_hostility_level = {
						target = scope:target.faith
						value < faith_astray_level
					}
				}
				add = 5
				desc = "SCHEME_RIGHTEOUS"
			}
			modifier = {
				scope:owner.faith = {
					faith_hostility_level = {
						target = scope:target.faith
						value < faith_hostile_level
					}
				}
				add = -5
				desc = "SCHEME_ASTRAY"
			}
			modifier = {
				scope:owner.faith = {
					faith_hostility_level = {
						target = scope:target.faith
						value < faith_evil_level
					}
				}
				add = -15
				desc = "SCHEME_HOSTILE"
			}
			modifier = {
				scope:owner.faith = {
					faith_hostility_level = {
						target = scope:target.faith
						value >= faith_evil_level
					}
				}
				add = -25
				desc = "SCHEME_EVIL"
			}
		}
		# Converting unreformed to reformed of the same religion
		modifier = {
			AND = {
				scope:owner.faith.religion = scope:target.faith.religion
				NOT = { scope:owner.faith = { has_doctrine_parameter = unreformed } }
				scope:target.faith = { has_doctrine_parameter = unreformed }
			}
			add = 20
			desc = "SCHEME_REFORMED"
		}
	}

	agent_success_chance = {
		base = 0
		first_valid = {
			modifier = {
				add = 50
				is_spouse_of = scope:target
				desc = "SCHEME_AGENT_IS_SPOUSE"
			}
			modifier = {
				add = 50
				has_relation_best_friend = scope:target
				desc = "SCHEME_AGENT_IS_BEST_FRIEND"
			}
			modifier = {
				add = 50
				has_relation_guardian = scope:target
				desc = "SCHEME_AGENT_IS_GUARDIAN"
			}
			modifier = {
				add = 30
				has_relation_friend = scope:target
				desc = "SCHEME_AGENT_IS_FRIEND"
			}
			modifier = {
				add = 30
				is_concubine_of = scope:target
				desc = "SCHEME_AGENT_IS_CONCUBINE"
			}
			modifier = {
				add = 30
				has_relation_lover = scope:target
				desc = "SCHEME_AGENT_IS_LOVER"
			}
			modifier = {
				add = 30
				scope:target = {
					is_ruler = yes
				}
				has_council_position = councillor_spymaster
				exists = scope:target.cp:councillor_spymaster
				scope:target.cp:councillor_spymaster = this
				desc = "SCHEME_AGENT_IS_SPYMASTER"
			}
			modifier = {
				add = 30
				scope:target = {
					is_ruler = no
				}
				has_council_position = councillor_spymaster
				exists = scope:target.liege.cp:councillor_spymaster
				scope:target.liege.cp:councillor_spymaster = this
				desc = "SCHEME_AGENT_IS_SPYMASTER_IN_MY_COURT"
			}
			modifier = {
				add = 20
				is_close_family_of = scope:target
				desc = "SCHEME_AGENT_IS_CLOSE_KIN"
			}
			modifier = {
				add = 15
				is_powerful_vassal_of = scope:target
				desc = "SCHEME_AGENT_IS_POWERFUL_VASSAL"
			}
			modifier = {
				add = 15
				is_extended_family_of = scope:target
				desc = "SCHEME_AGENT_IS_EXTENDED_FAMILY"
			}
			modifier = {
				add = 10
				scope:target.liege = scope:owner
				desc = "SCHEME_AGENT_IS_COURTIER_MY_COURT"
			}
			modifier = {
				add = 10
				is_ruler = no
				scope:target.liege = this.liege
				desc = "SCHEME_AGENT_IS_FELLOW_COURTIER"
			}
			modifier = {
				add = 5
				desc = "SCHEME_AGENT_IS_COURTIER"
			}
		}
	}

	on_ready = {
		scheme_owner = {
			#DISCOVERY ROLL
			save_scope_value_as = {
				name = discovery_chance
				value = {
					value = 100
					subtract = scope:scheme.scheme_secrecy
				}
			}
			random = {
				chance = scope:discovery_chance
				save_scope_value_as = {
					name = scheme_discovered
					value = yes
				}
			}

			#SUCCESS ROLL
			random = {
				chance = scope:scheme.scheme_success_chance

				save_scope_value_as = {
					name = scheme_successful
					value = yes
				}
			}

			#SECRECY: DO I WANT TO PROCEED?
			if = {
				limit = {
					scope:owner = {
						OR = {
							faith = {
								faith_hostility_level = {
									target = scope:target.faith
									value > faith_astray_level
								}
							}
							has_trait = zealous
						}
					}
				}
				trigger_event = conversion_scheme.0001
			}
			#CONTINUE WITH OUTCOME ON_ACTION FOR AI TARGETS
			else_if = {
				limit = { scope:target = { is_ai = yes } }

				if = {
					limit = { exists = scope:scheme_successful }
					trigger_event = conversion_scheme.0003 #Success event
				}
				else = {
					trigger_event = conversion_scheme.0004 # Fail event
				}
			}
			#FOR PLAYER CHARACTER, SEND CHOICE EVENT
			else = {
				scope:target = {
					trigger_event = conversion_scheme.0002
				}
			}
		}
	}

	on_monthly = {
		save_scope_as = scheme
		scheme_owner = { save_scope_as = owner }
		scheme_target = { save_scope_as = target }
	}

	on_invalidated = {
		scheme_target = {
			save_scope_as = target
		}
		scheme_owner = {
			save_scope_as = owner
		}
		if = {
			limit = {
				scope:target = { is_alive = no }
			}
			scope:owner = {
				send_interface_toast = {
					title = convert_to_faith_scheme_invalidated_title
					left_icon = scope:target
					custom_description_no_bullet = {
						object = scope:target
						text = scheme_target_died
					}
				}
			}
		}
		if = {
			limit = {
				scope:target = { is_imprisoned = yes }
			}
			scope:target.imprisoner = {
				save_scope_as = other_imprisoner
			}
			scope:owner = {
				send_interface_toast = {
					title = convert_to_faith_scheme_invalidated_title
					left_icon = scope:target
					right_icon = scope:other_imprisoner
					custom_description_no_bullet = {
						subject = scope:other_imprisoner
						object = scope:target
						text = scheme_target_imprisoned_by_other
					}
				}
			}
		}
	}

	success_desc = "CONVERT_TO_FAITH_SUCCESS_DESC"

	freeze_scheme_when_traveling = yes
	freeze_scheme_when_traveling_target = yes
}